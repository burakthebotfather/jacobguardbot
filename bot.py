import asyncio
import random
import datetime
import pytz
from collections import defaultdict

from telegram import Update, Message
from telegram.ext import Application, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7684439594:AAGE58iJTS1V-wjiKFdViAmcVKyImUnr15Y"
MINSK_TZ = pytz.timezone("Europe/Minsk")

# –ß–∞—Ç—ã –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç—Ä–µ–¥—ã
ALLOWED_TOPICS = {
    -1002079167705: 48,
    -1002936236597: 3,
    -1002423500927: 2,
    -1002535060344: 5,
    -1002477650634: 3,
    -1002660511483: 3,
    -1002864795738: 3,
    -1002360529455: 3,
    -1002538985387: 3,
}

# –§—Ä–∞–∑—ã
WARNING_MESSAGES = [
    "–ú–∏–Ω—É—Ç–æ—á–∫—É! –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–µ –¥–ª—è –≤—Å–µ—Ö. –Ø —Ç—É—Ç —Å–ª–µ–∂—É –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –∏ –≤—ã–Ω—É–∂–¥–µ–Ω –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã: –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!",
    "–≠–π! –≠—Ç–æ –º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –æ –¥–æ—Å—Ç–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è!",
    "–ü–æ—Ä—è–¥–æ–∫ ‚Äî –º–æ—ë –≤—Ç–æ—Ä–æ–µ –∏–º—è. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!",
    "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Ç—ã –≤—Ç–æ—Ä–≥—Å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –æ—Ç—á—ë—Ç–æ–≤. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!",
    "–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π. –ü–æ–ø—Ä–æ—à—É —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞!",
    "–ö–∞–∂–¥–æ–µ –ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç—å –ø–æ—Ä—è–¥–∫–∞. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!",
    "–û–ø–∞! –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞. –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑."
]

REMINDER_FOR_MINUS = (
    "–í–∏–∂—É, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –¥–æ—Å—Ç–∞–≤–æ–∫¬ª. "
    "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç."
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
plus_records = defaultdict(list)
warning_counts = defaultdict(int)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def monitor_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message: Message = update.message
    text = message.text or ""
    chat_id = message.chat_id
    thread_id = message.message_thread_id
    user_id = message.from_user.id
    username = message.from_user.full_name

    if chat_id in ALLOWED_TOPICS and thread_id in ALLOWED_TOPICS[chat_id]:
        if "+" in text:
            plus_records[(chat_id, thread_id)].append(datetime.datetime.now(tz=MINSK_TZ))
            print(f"[LOG] + –∑–∞–ø–∏—Å–∞–Ω: {chat_id}/{thread_id}")
        elif text.strip() == "-":
            reply = await message.reply_text(REMINDER_FOR_MINUS)
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
            try:
                await message.delete()
                await reply.delete()
            except Exception as e:
                print(f"[ERROR] –£–¥–∞–ª–µ–Ω–∏–µ '-' —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            # –ù–∞—Ä—É—à–µ–Ω–∏–µ
            warning_text = random.choice(WARNING_MESSAGES)
            warning = await message.reply_text(warning_text)

            # –°—á—ë—Ç—á–∏–∫
            warning_counts[user_id] += 1
            count = warning_counts[user_id]
            print(f"[WARN] {username} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({count}/3)")

            # –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(15)
            try:
                await message.delete()
                await warning.delete()
            except Exception as e:
                print(f"[ERROR] –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç ===
async def report_daily_plus(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now(tz=MINSK_TZ)
    yesterday = now.date() - datetime.timedelta(days=1)

    for (chat_id, thread_id), timestamps in plus_records.items():
        count = sum(1 for t in timestamps if t.date() == yesterday)
        if count > 0:
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    message_thread_id=thread_id,
                    text=f"üì¶ –ò—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {count}"
                )
                print(f"[LOG] –û—Ç—á—ë—Ç {count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}/{thread_id}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), monitor_section))

    loop = asyncio.get_event_loop()
    scheduler = AsyncIOScheduler(timezone=MINSK_TZ, event_loop=loop)
    trigger = CronTrigger(hour=23, minute=0)
    scheduler.add_job(report_daily_plus, trigger, args=[app.bot])
    scheduler.start()

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
